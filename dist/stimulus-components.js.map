{"version":3,"file":"stimulus-components.js","sources":["../src/uploader.js","../src/activestorage-attachments.js","../src/nested-form.js","../src/sortable.js"],"sourcesContent":["import { DirectUpload } from '@rails/activestorage'\n\nclass Uploader {\n  constructor (file, options) {\n    this.directUpload = new DirectUpload(\n      file,\n      '/rails/active_storage/direct_uploads',\n      this\n    )\n    this.options = options\n  }\n\n  start () {\n    const promise = new Promise((resolve, reject) => {\n      this.directUpload.create((error, blob) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve(blob.signed_id)\n        }\n      })\n    })\n\n    return promise.then(this.handleSuccess).catch(this.handleError)\n  }\n\n  handleChange = upload => {\n    this.options.onChangeFile(upload)\n  }\n\n  handleProgress = ({ loaded, total }) => {\n    const progress = (loaded / total) * 100\n\n    this.handleChange({\n      state: 'uploading',\n      file: this.directUpload.file,\n      id: this.options.id,\n      progress\n    })\n  }\n\n  handleSuccess = signedId => {\n    this.handleChange({\n      state: 'finished',\n      id: this.options.id,\n      file: this.directUpload.file,\n      signedId\n    })\n    return signedId\n  }\n\n  handleError = error => {\n    this.handleChange({\n      state: 'error',\n      id: this.options.id,\n      file: this.directUpload.file,\n      error\n    })\n    throw error\n  }\n\n  directUploadWillCreateBlobWithXHR (xhr) {\n    this.options.onBeforeBlobRequest &&\n      this.options.onBeforeBlobRequest({\n        id: this.options.id,\n        file: this.directUpload.file,\n        xhr\n      })\n  }\n\n  directUploadWillStoreFileWithXHR (xhr) {\n    this.options.onBeforeStorageRequest &&\n      this.options.onBeforeStorageRequest({\n        id: this.options.id,\n        file: this.directUpload.file,\n        xhr\n      })\n\n    xhr.upload.addEventListener('progress', this.handleProgress)\n  }\n}\n\nexport default Uploader\n","import { Controller } from '@hotwired/stimulus'\nimport Uploader from './uploader'\n\nexport default class extends Controller {\n  static targets = ['input', 'file', 'count', 'message']\n  static values = {\n    maxFiles: Number,\n    minFiles: Number,\n    maxMb: Number,\n    maxDimension: Number,\n    whitelist: Array\n  }\n\n  get activeFiles () {\n    return this.fileTargets.filter(div => !div.classList.contains('destroying'))\n  }\n\n  handleFileClick () {\n    if (\n      this.hasMaxFilesValue &&\n      this.activeFiles.length >= this.maxFilesValue\n    ) {\n      setMessage('alert', `Maximum files allowed: ${this.maxValue}`)\n      return false\n    }\n\n    this.inputTarget.click()\n  }\n\n  async handleNewFiles (event) {\n    const files = Array.from(event.target.files)\n\n    if (\n      this.hasMaxFilesValue &&\n      files.length + this.activeFiles.length > this.maxFilesValue\n    ) {\n      setMessage('alert', `Maximum files allowed: ${this.maxValue}`)\n      return false\n    }\n\n    const approvedFiles = await Promise.all(\n      files.map(file => this.approveFile(file))\n    )\n    const results = approvedFiles.filter(Boolean).map(f => f)\n\n    this.submitFiles(results)\n    this.inputTarget.value = null\n  }\n\n  async approveFile (file) {\n    if (this.hasWhitelistValue && !this.whitelistValue.includes(file.type)) {\n      setMessage('alert', `Invalid file type: ${file.name}`)\n      return false\n    }\n\n    if (this.hasmaxMbValue && file.size > this.maxMb) {\n      setMessage('alert', `File size too large: ${file.name}`)\n      return false\n    }\n\n    if (this.hasMaxDimensionValue) {\n      const largestDimension = await this.getLargestDimension(file)\n\n      if (largestDimension > this.MaxDimensionValue) {\n        setMessage('alert', `Dimensions are too lage: ${file.name}`)\n        return false\n      }\n    }\n\n    return file\n  }\n\n  getLargestDimension (file) {\n    return new Promise(resolve => {\n      const img = new Image()\n      img.src = URL.createObjectURL(file)\n\n      img.onload = () => {\n        const largestDimension = Math.max(img.width, img.height)\n        URL.revokeObjectURL(img.src)\n        resolve(largestDimension)\n      }\n    })\n  }\n\n  createAttachment (event) {\n    return this.element.nestedForm.addAssociation(event)\n  }\n\n  removeAttachment (event) {\n    this.element.nestedForm.removeAssociation(event)\n    this.updateCount()\n  }\n\n  submitFiles (files) {\n    files.forEach(file => {\n      const attachment = this.createAttachment()\n\n      const progressHtml = `\n        <div class=\"upload-progress\">\n          <div class=\"progress-bar\"></div>\n        </div>\n      `\n      attachment.insertAdjacentHTML('beforeend', progressHtml)\n      attachment.querySelector('.filename').innerText = file.name\n\n      if (file.type.includes('image') && attachment.querySelector('img')) {\n        attachment.querySelector('img').src = URL.createObjectURL(file)\n      }\n\n      const uploader = new Uploader(file, {\n        id: attachment.dataset.tempId,\n        onChangeFile: this.handleFileProgress\n      })\n\n      uploader.start()\n    })\n  }\n\n  handleFileProgress = event => {\n    const attachment = document.querySelector(`[data-temp-id=\"${event.id}\"]`)\n\n    switch (event.state) {\n      case 'uploading':\n        attachment.querySelector(\n          '.progress-bar'\n        ).style.width = `${event.progress}%`\n        break\n      case 'error':\n        attachment.remove()\n        setMessage('alert', `Error uploading ${event.file.name}.`)\n        break\n      case 'finished': {\n        attachment.querySelector('.upload-progress').remove()\n\n        const hiddenSignedIdField = document.createElement('input')\n\n        hiddenSignedIdField.setAttribute('type', 'hidden')\n        hiddenSignedIdField.setAttribute('value', event.signedId)\n        hiddenSignedIdField.name = attachment\n          .querySelector(\"input[name*='_destroy']\")\n          .name.replace(/_destroy/g, 'file')\n\n        attachment.appendChild(hiddenSignedIdField)\n\n        this.updateCount()\n        break\n      }\n      default:\n        break\n    }\n  }\n\n  updateCount () {\n    if (this.hasCountTarget) {\n      this.countTarget.value = this.activeFiles.length\n    }\n  }\n\n  setMessage (type, message) {\n    console.log(message)\n  }\n}\n","import { Controller } from '@hotwired/stimulus'\n\nexport default class extends Controller {\n  static targets = ['list', 'item', 'template', 'message']\n  static values = {\n    replaceKey: String,\n    max: Number,\n    min: Number\n  }\n\n  initialize () {\n    this.element.nestedForm = this\n  }\n\n  connect () {\n    this.replaceKey = this.replaceKeyValue || 'NEW_RECORD'\n  }\n\n  get activeItems () {\n    return this.itemTargets.filter(div => !div.classList.contains('destroying'))\n  }\n\n  findTemplate (name) {\n    return name\n      ? this.templateTargets.find(\n          element => element.dataset.templateName == name\n        )\n      : this.templateTarget\n  }\n\n  addAssociation (event) {\n    if (this.hasMaxValue && this.activeItems.length >= this.maxValue) {\n      setMessage('alert', `Maximum allowed: ${this.maxValue}`)\n      return false\n    }\n\n    const template =\n      typeof event === 'undefined'\n        ? this.templateTarget\n        : this.findTemplate(event.target.value)\n\n    const tempId = Date.now() * Math.floor(Math.random() * 100)\n    const content = template.innerHTML.replace(\n      new RegExp(this.replaceKey, 'g'),\n      tempId\n    )\n    this.listTarget.insertAdjacentHTML('beforeend', content)\n\n    const newElement = this.listTarget.lastElementChild\n\n    newElement.dataset.tempId = tempId\n\n    if (this.listTarget.sortableController)\n      this.listTarget.sortableController.update()\n\n    return newElement\n  }\n\n  removeAssociation (event) {\n    const wrapper = event.target.closest(\"[data-nested-form-target='item']\")\n\n    // New records are simply removed from the page\n    if (wrapper.dataset.newRecord == 'true') {\n      wrapper.remove()\n\n      // Existing records are hidden and flagged for deletion\n    } else {\n      wrapper.querySelector(\"input[name*='_destroy']\").value = 1\n      wrapper.classList.add('hidden', 'destroying')\n    }\n  }\n\n  setMessage (type, message) {\n    console.log(message)\n  }\n}\n","import { Controller } from '@hotwired/stimulus'\nimport Sortable from 'sortablejs'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport default class extends Controller {\n  static targets = ['position']\n\n  initialize () {\n    this.element.sortableController = this\n\n    this.sortable = Sortable.create(this.element, {\n      group: uuidv4(),\n      animation: 150,\n      onEnd: this.end.bind(this),\n      filter: 'input, button, select, textarea',\n      preventOnFilter: false\n    })\n  }\n\n  update () {\n    this.positionTargets.forEach((position, index) => (position.value = index))\n  }\n\n  end () {\n    this.update()\n  }\n}\n"],"names":["Uploader","file","options","handleChange","upload","_this","onChangeFile","this","handleProgress","state","directUpload","id","progress","loaded","_ref","total","handleSuccess","signedId","handleError","error","DirectUpload","start","Promise","resolve","reject","_this2","create","blob","signed_id","then","directUploadWillCreateBlobWithXHR","xhr","onBeforeBlobRequest","directUploadWillStoreFileWithXHR","onBeforeStorageRequest","addEventListener","handleFileProgress","event","attachment","document","querySelector","style","width","remove","setMessage","name","hiddenSignedIdField","createElement","setAttribute","replace","appendChild","updateCount","Controller","handleFileClick","hasMaxFilesValue","activeFiles","length","maxFilesValue","maxValue","inputTarget","click","handleNewFiles","_this3","files","Array","from","target","all","map","approveFile","approvedFiles","results","filter","Boolean","f","submitFiles","value","_this5","hasWhitelistValue","whitelistValue","includes","type","hasmaxMbValue","size","maxMb","hasMaxDimensionValue","getLargestDimension","largestDimension","MaxDimensionValue","_exit2","img","Image","src","URL","createObjectURL","onload","Math","max","height","revokeObjectURL","createAttachment","element","nestedForm","addAssociation","removeAttachment","removeAssociation","_this6","forEach","insertAdjacentHTML","innerText","dataset","tempId","hasCountTarget","countTarget","message","console","log","fileTargets","div","classList","contains","targets","values","maxFiles","Number","minFiles","maxDimension","whitelist","initialize","connect","replaceKey","replaceKeyValue","findTemplate","templateTargets","find","templateName","templateTarget","hasMaxValue","activeItems","template","Date","now","floor","random","content","innerHTML","RegExp","listTarget","newElement","lastElementChild","sortableController","update","wrapper","closest","newRecord","add","_createClass","_default","key","get","itemTargets","String","min","sortable","Sortable","group","uuidv4","animation","onEnd","end","bind","preventOnFilter","positionTargets","position","index"],"mappings":"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"}